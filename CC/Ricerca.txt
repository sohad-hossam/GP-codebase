package unisa.gps.etour.control.GestioneRicerche;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Hashtable;

import unisa.gps.etour.bean.BeanBeneCulturale;
import unisa.gps.etour.bean.BeanPuntoDiRistoro;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.repository.DBBeneCulturale;
import unisa.gps.etour.repository.DBPuntoDiRistoro;
import unisa.gps.etour.repository.DBTag;
import unisa.gps.etour.repository.IDBBeneCulturale;
import unisa.gps.etour.repository.IDBPuntoDiRistoro;
import unisa.gps.etour.repository.IDBTag;
import unisa.gps.etour.util.ControlloDati;
import unisa.gps.etour.util.MessaggiErrore;
import unisa.gps.etour.util.Punto3D;

public class Search extends UnicastRemoteObject implements ISearch {

private static final long serialVersionUID = -6009809097302884655L;

public Search() throws RemoteException {
    super();
}

// Search Parameters
private int touristId = -1;
private String keywords;
private double maxRadius;
private Point3D userPosition;
private int itemsPerPage = -1;
private byte siteType = -1;

// Objects for the database connection
private ICulturalAssetDB culturalAssetDB = new CulturalAssetDB();
private IRestaurantDB restaurantDB = new RestaurantDB();
private ITagDB tagDB = new TagDB();

// List of obtained tags
private ArrayList<BeanTag> tags;

// Search Results pages partitioned
private Hashtable<Integer, ArrayList<BeanCulturalAsset>> culturalAssetSearchResults = new Hashtable<>();
private Hashtable<Integer, ArrayList<BeanRestaurant>> restaurantSearchResults = new Hashtable<>();

// Quantity of items and pages results in the research phase
private int numberOfResultPages = -1;
private int numberOfSearchElements = -1;

@Override
public int search(int touristId, String keywords, int[] tagIds, double maxRadius, int itemsPerPage,
                  Point3D userPosition, byte siteType) throws RemoteException {
    // Reset parameters of the previous search
    resetParameters();

    // Start checking the correctness of the search parameters
    try {
        this.touristId = touristId;
        this.tags = arrayToArrayListTag(tagIds);
        this.keywords = DataControl.correctString(keywords, true, true, "", DataControl.MAX_LENGTH);
        this.maxRadius = maxRadius;
        this.userPosition = userPosition;
        this.siteType = siteType;

        // If parameters are valid, get the number of results
        if (itemsPerPage > 0 && ((siteType == 0) || (siteType == 1)) &&
                maxRadius > 0 && userPosition != null &&
                (this.numberOfSearchElements = getNumberOfSearchElements()) >= 0) {
            this.itemsPerPage = itemsPerPage;
            this.numberOfResultPages = calculateNumberOfSearchPages();

            return this.numberOfSearchElements;
        } else {
            return -1; // Otherwise, return -1
        }
    } catch (SQLException e) {
        throw new RemoteException(ErrorMessage.DBMS_ERROR);
    } catch (Exception e) {
        throw new RemoteException(ErrorMessage.UNKNOWN_ERROR);
    }
}
}

/* (Non-Javadoc)
* @ See unisa.gps.etour.control.GestioneRicerche.IRicerca # getResultsPageCulturalAsset (int)
* /
public CulturalAssetBean [] getResultsPageCulturalAsset (int page)
throws RemoteException
(
/ / Check that the site type is valid and that the page is
/ / Within range
if ((this.siteType == CULTURAL_ASSET) && checkPage(page))
(
/ / Convert the obtained list into an array
CulturalAssetBean [] results = new CulturalAssetBean [calculatePageElementNumber(page)];
/ / Results = searchCulturalAssetsPerPage (page). ToArray (
/ / Results);

results = searchPerPage (page). toArray (results);

return results;
)
else
return null;
)

/ * (Non-Javadoc)
* @ See unisa.gps.etour.control.GestioneRicerche.IRicerca # getResultsPageRestaurant (int)
* /
public RestaurantBean [] getResultsPageRestaurant (int page)
throws RemoteException
(
/ / Check that the site type is valid and that the page is
/ / Within range
if ((this.siteType == RESTAURANT)
& & CheckPage (page))
(
/ / Convert the obtained list into an array
RestaurantBean [] results = new RestaurantBean [calculatePageElementNumber (page)];
/ / Results = searchRestaurantsPerPage (page). ToArray (
/ / Results);

results = searchPerPage (page). toArray (results);

return results;
)
else
return null;
)

/ * (Non-Javadoc)
* @ See unisa.gps.etour.control.GestioneRicerche.IRicerca # getNumberOfSearchElements ()
* /
public int getNumberOfSearchElements () throws RemoteException
(
return numberOfSearchElements;
)

/ * (Non-Javadoc)
* @ See unisa.gps.etour.control.GestioneRicerche.IRicerca # getNumberOfSearchPages ()
* /
public int getNumberOfSearchPages () throws RemoteException
(
return numberOfResultPages;
)

/ **
* Method to obtain the number of search results
*
* @ Return the number of search results. Returns -1 on error
* @ Throws SQLException Database Connection Exception
* /
private int getNumberOfSearchElementsSpecialized () throws SQLException
(
/ / Check the site type and obtain the number of results
if (checkTouristId ())
(
switch (siteType)
(
case CULTURAL_ASSET:
return touristId > 0 ? culturalAssetDB
. getNumberOfAdvancedSearchElements (
this.touristId, this.keywords,
this.tags, this.userPosition,
this.maxRadius): culturalAssetDB
. getNumberOfSearchElements (this.keywords,
this.tags, this.userPosition,
this.maxRadius);
case RESTAURANT:
return touristId > 0 ? restaurantDB
. getNumberOfAdvancedSearchElements (
this.touristId, this.keywords,
this.tags, this.userPosition,
this.maxRadius): restaurantDB
. getNumberOfSearchElements (this.keywords,
this.tags, this.userPosition,
this.maxRadius);
)
)
return -1;
)

/ **
* Method for returning the list of results
*
* @ Param pPageNumber range of results to return
* @ Return Container sites emerged in the research phase as the interval
* @ Throws RemoteException Remote Exception
* /
private ArrayList <?> searchPerPage (int pPageNumber)
throws RemoteException
(

/ / Declare the list of sites related to the input page
ArrayList <?> CurrentPageResults = null;
TRY
(
if (checkTouristId ())
(
/ / Check the type of site
switch (siteType)
(
case CULTURAL_ASSET:
/ / If the list has not already been obtained previously
/ / Search
if ((currentPageResults = searchResultsCulturalAssets
. get (pPageNumber)) == null)
(
currentPageResults = (ArrayList <?>) (touristId> 0? CulturalAsset
. advancedSearch (touristId, keywords,
tags, pPageNumber,
itemsPerPage,
userPosition, maxRadius)
: CulturalAsset.search (keywords,
tags, pPageNumber,
itemsPerPage,
userPosition, maxRadius));
searchResultsCulturalAssets
. put (
pPageNumber,
(ArrayList <CulturalAssetBean>) currentPageResults);
)
break;

case RESTAURANT:
/ / If the list has not already been obtained previously
/ / Search
if ((currentPageResults = searchResultsRestaurants
. get (pPageNumber)) == null)
(
currentPageResults = (ArrayList <?>) (touristId> 0? Restaurant
. advancedSearch (touristId, keywords,
tags, pPageNumber,
itemsPerPage,
userPosition, maxRadius)
: Restaurant.search (keywords,
tags, pPageNumber,
itemsPerPage,
userPosition, maxRadius));
searchResultsRestaurants
. put (
pPageNumber,
(ArrayList <RestaurantBean>) currentPageResults);
)
break;
)
)
/ / Return the results
currentPageResults return;
)

catch (SQLException e)
(
throw new RemoteException (ErrorMessages.DB_ERROR);
)
catch (Exception e)
(
throw new RemoteException (ErrorMessages.UNKNOWN_ERROR);
)

)

/ **
* Method for calculating the number of pages found at
* Search
*
* @ Return many pages in the research phase
* /
private int calculateNumberOfSearchPages ()
(
/ / If the number of pages is greater than or equal to 0 returns the number of
/ / Pages
if (numberOfResultPages> = 0)
return numberOfResultPages;
/ / If the number of elements is a multiple of the number of items per page
/ / Return their relationship
if ((numberOfSearchElements% itemsPerPage == 0))
return (numberOfSearchElements / itemsPerPage);
/ / Otherwise returns their relationship + 1
return (numberOfSearchElements / itemsPerPage) + 1;
)
/ **
* Method for calculating the number of elements in the interval
* For a given page
*
* @ Param pageNumber Results page number
* @ Return number of elements in a page
* /
private int calculateNumberOfPageElements(int pageNumber)
(
/ / If the page number is the last one, return its form
if (pageNumber == (numberOfResultPages - 1))
return (numberOfSearchElements % itemsPerPage);
/ / Otherwise return the number of items per page
else
return (itemsPerPage);
)

/ **
* Method for checking the validity of a page
*
* @ Param pageNumber Page to check
* @ Return true if the page is valid
* /
private boolean checkPage(int pageNumber)
(
/ / If the page number is in the range, return true
return (pageNumber> = 0 & & pageNumber <numberOfResultPages);
)

/ **
* Method for checking the correctness of the Tourist identifier
*
* @ Return true if the identifier is valid, false otherwise
* /
private boolean checkTouristId()
(
return ((touristId> 0) | | (touristId == -1));
)

/ **
* Method to reset all the variables related to a search
*
* @ Return A constant that indicates the correct zero
* /
private int resetParameters()
(

/ / Clear all the search parameters
touristId = -1;
siteType = -1;
itemsPerPage = -1;
numberOfSearchElements = -1;
numberOfResultPages = -1;

searchResultsCulturalAssets.clear();
searchResultsRestaurants.clear();

return -1;
)

/ **
* Method for detecting and converting tag data into a structured list
*
* @ Param pTagsId List of tag identifiers for the search
* @ Return List of search tags
* @ Throws SQLException
* /
private ArrayList <BeanTag> arrayToArrayListTag(int [] pTagsId)
throws SQLException
(
/ / Initialize the list of Tags
ArrayList <BeanTag> tagsList = new ArrayList<>();
/ / If the list of tag identifiers is empty, retrieve the tags
if (pTagsId = null)
(
BeanTag currentTag = null;
TRY
(

/ / Loop for inserting tags found into the list
for (int i = 0; i <pTagsId.length i + +)
(
/ / If the identifier is greater than 0
if (pTagsId [i]> 0)
(
currentTag = Tag.getTag(pTagsId [i]);
/ / Check correctness on tags
if (DataCheck.checkBeanTag(currentTag))
tagsList.add(currentTag);
)
)

)
catch (SQLException e)
(
throw new SQLException (ErrorMessages.DB_ERROR);
)
)
/ / Return the list of tags
tagsList return;
)
)
