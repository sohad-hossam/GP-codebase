package unisa.gps.etour.control.CulturalHeritageManagement;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import unisa.gps.etour.bean.BeanGoodCultural;
import unisa.gps.etour.bean.BeanTag;
import unisa.gps.etour.bean.BeanVisitBC;
import unisa.gps.etour.repository.DBTag;
/ / import unisa.gps.etour.repository.DBGoodCultural;
/ / import unisa.gps.etour.repository.DBTourist;
/ / import unisa.gps.etour.repository.DBVisitBC;
import unisa.gps.etour.repository.IDBGoodCultural;
import unisa.gps.etour.repository.IDBTag;
import unisa.gps.etour.repository.IDBTourist;
import unisa.gps.etour.repository.IDBVisitBC;
import unisa.gps.etour.util.GlobalConstants;
import unisa.gps.etour.util.MessageError;

/ / Stub
import unisa.gps.etour.control.CulturalHeritageManagement.test.stub.DBGoodCultural / / ***
import unisa.gps.etour.control.CulturalHeritageManagement.test.stub.DBTourist / / ***
import unisa.gps.etour.control.CulturalHeritageManagement.test.stub.DBVisitBC / / ***

/ **
  * Class management of cultural heritage for operations common to all actors
  *
  * @ Author Michelangelo De Simone
  * @ Version 0.1
  *
  * © 2007 eTour Project - Copyright by DMI SE @ SA Lab - University of Salerno
  * /
/ **
  *
  * /
CulturalHeritageManagementCommune UnicastRemoteObject public class extends implements
ICulturalHeritageManagementCommune
(
/ / Connect to DB for Cultural Heritage
protected IDBGoodCultural dbbc;

/ / Connect to DB Tag
protected IDBTag dbtag;

/ / Connect to DB for the Feedback / Visits
protected IDBVisitBC dbVisit;

/ / Connect to DB for Tourists
protected IDBTourist dbTourist;

/ **
  * Constructor; you instantiate all fields relevant to data management;
* Fields are initialized for each instance of the class.
*
* @ Throws RemoteException Exception flow
* /
public CulturalHeritageManagementCommune () throws RemoteException
(
/ / Class Superconstructor UnicastRemoteObject
super ();

/ / We instantiate objects
TRY
(
dbbc = new DBGoodCultural ();
dbtag = new DBTag ();
dbVisit = new DBVisitBC ();
dbTourist = new DBTourist ();
)
catch (Exception e)
(
throw new RemoteException (MessageError."Error_UNKNOWN);
)
)

/ *
* Implements the method for obtaining a cultural object by Id
*
* @ See unisa.gps.etour.control.CulturalHeritageManagement.ICulturalHeritageManagementCommune # getGoodCultural (int)
* /
public BeanGoodCultural getGoodCultural (int pGoodCulturalID) throws RemoteException
(
if (! ControlloBeniCulturali.checkIdGoodCultural (pGoodCulturalID))
throw new RemoteException (MessageError.Error_DATA);

BBC BeanGoodCultural = null;

TRY
(
bbc = dbbc.getGoodCultural (pGoodCulturalID);
)
catch (SQLException e)
(
throw new RemoteException (MessageError.Error_DBMS);
)
catch (Exception e)
(
throw new RemoteException (MessageError."Error_UNKNOWN);
)

bbc return;
)

/ *
* Implements the method for obtaining all the tags of a cultural object.
*
* @ See unisa.gps.etour.control.CulturalHeritageManagement.ICulturalHeritageManagementCommune # getTagGoodCultural (int)
* /
<BeanTag> getTagGoodCultural public ArrayList (int pGoodCulturalID) throws RemoteException
(
if (! ControlloBeniCulturali.checkIdGoodCultural (pGoodCulturalID))
throw new RemoteException (MessageError.Error_DATA);

ArrayList <BeanTag> btag = null;

TRY
(
btag = dbtag.getTagGoodCultural (pGoodCulturalID);
)
catch (SQLException e)
(
throw new RemoteException (MessageError.Error_DBMS);
)
catch (Exception e)
(
throw new RemoteException (MessageError."Error_UNKNOWN);
)

btag return;
)

/ *
* Implements the method to obtain the list of feedback and their username on a property
* Cultural specified by Id
*
* @ See unisa.gps.etour.control.CulturalHeritageManagement.ICulturalHeritageManagementCommune # getFeedbackGoodCultural (int)
* /
<BeanVisitBC, String> getFeedbackGoodCultural public HashMap (int pGoodCulturalID) throws RemoteException
(
if (! ControlloBeniCulturali.checkIdGoodCultural (pGoodCulturalID))
throw new RemoteException (MessageError.Error_DATA);

HashMap <BeanVisitBC, String> mapReturn;

TRY
(
/ / Instantiate the map of the same size as the list of BeanVisitBC
mapReturn = new HashMap <BeanVisitBC, String> (dbVisit.getListVisitBC (pGoodCulturalID). size ());

/ / For each visit by adding their username
/ / Here we begin to iterate to add to any visit their username
for (BeanVisitBC b: dbVisit.getListVisitBC (pGoodCulturalID))
mapReturn.put (b, dbTourist.getTourist (b.getIdTourist ()). GetUserName ());

)
catch (SQLException e)
(
throw new RemoteException (MessageError.Error_DBMS);
)
catch (Exception e)
(
throw new RemoteException (MessageError."Error_UNKNOWN);
)

mapReturn return;
)

/ *
* Implements the method to obtain statistics about a cultural past
* Through Id
*
* @ See unisa.gps.etour.control.CulturalHeritageManagement.ICulturalHeritageManagementCommune # getStatisticsGoodCultural (int)
* /
<Integer> getStatisticsGoodCultural public ArrayList (int pGoodCulturalID) throws RemoteException
(
/ *
* This method returns an ArrayList containing 5 elements (0 .. 4).
* For each index more 'one is the number of equivalent value your feedback
* Index number more 'one.
* Even in this case the method is not 'particularly attractive but it does its dirty work
* Fine.
* /

if (! CulturalAssetsControl.checkIdGoodCultural (pGoodCulturalID))
throw new RemoteException (MessageError.Error_DATA);

ArrayList <Integer> resultList <Integer> = new ArrayList (5);

/ / Set all the indices to 0
for (int i = 0; i <5; i + +)
resultList.add (i, Integer.valueOf (0));

/ / Calculate the date for the last thirty days
Date lastThirtyDays = new Date (new Date (). GetTime () - GlobalConstants.THIRTY_DAYS);

TRY
(
/ / Get all visits of a certain cultural
/ / Loop looking for the requests / feedback obtained within the last thirty days
for (BeanVisitBC b: dbVisit.getListVisitBC (pGoodCulturalID))
if (b.getDataVisit (). after (lastThirtyDays))
resultList.set (b.getVote () - 1, Integer.valueOf (resultList.get (b.getVote () - 1). intValue () + 1));
)
catch (SQLException e)
(
throw new RemoteException (MessageError.Error_DBMS);
)
catch (Exception e)
(
throw new RemoteException (MessageError."Error_UNKNOWN);
)

resultList return;
)

/ *
* Implement the method for changing a feedback on a cultural past
* Through Id
*
* @ See unisa.gps.etour.control.CulturalHeritageManagement.ICulturalHeritageManagementCommune # modificationFeedbackGoodCultural (int, unisa.gps.etour.bean.BeanVisitBC)
* /
public boolean modificationFeedbackGoodCultural (int pGoodCulturalID, BeanVisitBC pBeanVisitBC) throws RemoteException
(
if (! CulturalHeritageControl.checkIdGoodCultural (pGoodCulturalID) | |
! CulturalSitesVisitControl.controlDataVisitGoodCultural (pBeanVisitBC))
throw new RemoteException (MessageError.Error_DATA);

/ *
* Please check that the vote has not changed.
* If the vote is changed to an exception is raised
* /
voteOk boolean = true;

TRY
(
voteOk = dbVisit.getVisitBC (pGoodCulturalID, pBeanVisitBC.getIdTourist ()). getVote () == pBeanVisitBC.getVoto ();
)
catch (SQLException e)
(
throw new RemoteException (MessageError.Error_DBMS);
)
catch (Exception e)
(
throw new RemoteException (MessageError."Error_UNKNOWN);
)

/ *
* If the vote is not changed we proceed to send the message to the method of
* Change the layer's database.
* /
if (voteOk)
TRY
(
return (dbVisit.modificationVisitBC (pBeanVisitBC));
)
catch (SQLException e)
(
throw new RemoteException (MessageError.Error_DBMS);
)
catch (Exception e)
(
throw new RemoteException (MessageError."Error_UNKNOWN);
)

return false;
)
) 